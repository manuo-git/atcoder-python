"from collections import deque, defaultdict, Counter",
"from bisect import bisect_left, bisect_right",
"from atcoder.fenwicktree import FenwickTree",
"from atcoder.segtree import SegTree",
"from atcoder.lazysegtree import LazySegTree",
"from atcoder.string import suffix_array, z_algorithm",
"from itertools import permutations, combinations",
"from functools import cache, cmp_to_key",
"from heapq import heappop, heappush",
"import math, sys",
"# input = sys.stdin.readline",
"_int = lambda x: int(x)-1",
"MOD = 998244353 # 10**9+7",
"INF = 1<<60",
"Yes, No = "Yes", "No"",
"",
"from typing import *",
"",
"def sort(data: List[Any]):",
"    if len(data) == 1: return",
"    res = _sort(data)",
"    data.clear()",
"    data.extend(res)",
"",
"def _sort(data: List[Any]):",
"    if len(data) <= 1:",
"        return data",
"    m = len(data)//2",
"    ret = merge(_sort(data[:m]), _sort(data[m:]))",
"    return ret",
"",
"def merge(l, r):",
"    res = []",
"    i, j = 0, 0",
"    while i < len(l) and j < len(r):",
"        if cmp(l[i], r[j]):",
"            res.append(l[i])",
"            i += 1",
"        else:",
"            res.append(r[j])",
"            j += 1",
"    if i < len(l): res.extend(l[i:])",
"    if j < len(r): res.extend(r[j:])",
"    return res",
"",
"def _merge(l: List[Any], r: List[Any]):",
"    res = []",
"    for i in reversed(range(len(l))):",
"        if len(r) == 0:",
"            for j in reversed(range(i+1)):",
"                res.append(l[j])",
"            break",
"        lj, rj = -1, len(r)",
"        while rj-lj > 1:",
"            m = (lj+rj)//2",
"            if cmp(l[i], r[m]): rj = m",
"            else: lj = m",
"        for _ in range(len(r)-lj-1):",
"            res.append(r.pop())",
"        res.append(l[i])",
"    while r: res.append(r.pop())",
"    return res[::-1]",
"",
"def cmp(p1, p2):",
"    print(f"? {p1} {p2}")",
"    st = input()",
"    return st == "<"",
"",
"N, Q = map(int, input().split())",
"",
"if N == 5:",
"    print(0)",
"else:",
"    li = [chr(i+65) for i in range(N)]",
"    sort(li)",
"    ans = "".join(li)",
"    print(f"! {ans}")",
"",
